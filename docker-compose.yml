version: '3.8'

services:
  # Web Server (Nginx)
  web:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/dist:/var/www/html
      - ./storage/app/public:/var/www/html/storage
    depends_on:
      - api
      - recommendation
    networks:
      - jalanyuk-network
    restart: unless-stopped

  # Laravel API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/var/www/html
      - ./storage:/var/www/html/storage
    depends_on:
      - db
      - redis
    networks:
      - jalanyuk-network
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=db
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - RECOMMENDATION_API_URL=http://recommendation:5000

  # PHP-FPM Worker for Queue Processing
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: php artisan queue:work --tries=3
    volumes:
      - ./backend:/var/www/html
      - ./storage:/var/www/html/storage
    depends_on:
      - db
      - redis
    networks:
      - jalanyuk-network
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=db
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis

  # MySQL Database
  db:
    image: mysql:8.0
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - jalanyuk-network
    restart: unless-stopped
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Cache and Queue
  redis:
    image: redis:alpine
    volumes:
      - redis-data:/data
    networks:
      - jalanyuk-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Python Recommendation API
  recommendation:
    build:
      context: ./recommendation_engine
      dockerfile: Dockerfile
    volumes:
      - ./recommendation_engine:/app
      - ./recommendation_engine/data:/app/data
    networks:
      - jalanyuk-network
    restart: unless-stopped
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_DATABASE}
      - DB_USER=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DATA_DIR=/app/data
      - PORT=5000

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - jalanyuk-network
    restart: unless-stopped

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - jalanyuk-network
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false

  # Elasticsearch for Logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - jalanyuk-network
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    ports:
      - "5601:5601"
    networks:
      - jalanyuk-network
    restart: unless-stopped
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

  # Filebeat for Log Collection
  filebeat:
    image: docker.elastic.co/beats/filebeat:7.14.0
    volumes:
      - ./monitoring/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./backend/storage/logs:/var/log/laravel:ro
      - ./nginx/logs:/var/log/nginx:ro
    networks:
      - jalanyuk-network
    restart: unless-stopped
    depends_on:
      - elasticsearch
    command: filebeat -e -strict.perms=false

networks:
  jalanyuk-network:
    driver: bridge

volumes:
  db-data:
  redis-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
